{"ast":null,"code":"var _jsxFileName = \"/Users/haquefarazul/POSP/Webapp/src/MainMint.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers, BigNumber } from 'ethers';\nimport POSP from './POSP.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst POSPAddress = '0x380dbcE100769Ea538fff6dA5579e202FdBF0D90';\n\nconst MainMint = _ref => {\n  _s();\n\n  let {\n    accounts,\n    setAccounts\n  } = _ref;\n  const [mintAmount, setMintAmount] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n\n  async function handleMint() {\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.contract(POSPAddress, POSP.abi, signer);\n\n      try {\n        const response = await contract.mint(BigNumber.from(mintAmount));\n        console.log('response: ', response);\n      } catch (err) {\n        console.log(\"error: \", err);\n      }\n    }\n  }\n\n  const handleDecrement = () => {\n    if (mintAmount <= 1) return;\n    setMintAmount(mintAmount - 1);\n  };\n\n  const handleIncrement = () => {\n    //   if(mintAmount >= 3) return;\n    setMintAmount(mintAmount + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"POSP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Welcome to the future where your resume is a collection of NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 8\n    }, this), isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDecrement,\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: mintAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleIncrement,\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMint,\n        children: \"Mint Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You are not connected to Mint. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MainMint, \"I3j3SNTCnbWjQOGzG0sodIP+I4Q=\");\n\n_c = MainMint;\nexport default MainMint;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainMint\");","map":{"version":3,"sources":["/Users/haquefarazul/POSP/Webapp/src/MainMint.js"],"names":["useState","ethers","BigNumber","POSP","POSPAddress","MainMint","accounts","setAccounts","mintAmount","setMintAmount","isConnected","Boolean","handleMint","window","ethereum","provider","providers","Web3Provider","signer","getSigner","contract","abi","response","mint","from","console","log","err","handleDecrement","handleIncrement"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,QAAgC,QAAhC;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,WAAW,GAAG,4CAApB;;AAEA,MAAMC,QAAQ,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA4B;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMU,WAAW,GAAGC,OAAO,CAACL,QAAQ,CAAC,CAAD,CAAT,CAA3B;;AAEA,iBAAeM,UAAf,GAA2B;AACzB,QAAIC,MAAM,CAACC,QAAX,EAAoB;AAClB,YAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMI,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAInB,MAAM,CAACmB,QAAX,CACfhB,WADe,EAEfD,IAAI,CAACkB,GAFU,EAGfH,MAHe,CAAjB;;AAKA,UAAI;AACF,cAAMI,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,CAAcrB,SAAS,CAACsB,IAAV,CAAehB,UAAf,CAAd,CAAvB;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,QAA1B;AACD,OAHD,CAGC,OAAMK,GAAN,EAAU;AACTF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,GAAvB;AACD;AACF;AACF;;AAED,QAAMC,eAAe,GAAG,MAAK;AAC3B,QAAGpB,UAAU,IAAE,CAAf,EAAkB;AAClBC,IAAAA,aAAa,CAAED,UAAU,GAAE,CAAd,CAAb;AACD,GAHD;;AAKA,QAAMqB,eAAe,GAAG,MAAK;AAC/B;AACIpB,IAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACD,GAHD;;AAKA,sBACE;AAAA,4BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAGIE,WAAW,gBACV;AAAA,8BACE;AAAA,gCACE;AAAQ,UAAA,OAAO,EAAEkB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAIpB;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,OAAO,EAAEqB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAQ,QAAA,OAAO,EAAIjB,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBAUV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbL;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAlDD;;GAAMP,Q;;KAAAA,Q;AAoDN,eAAeA,QAAf","sourcesContent":["import {useState} from 'react';\nimport {ethers, BigNumber} from 'ethers';\nimport POSP from './POSP.json';\n\nconst POSPAddress = '0x380dbcE100769Ea538fff6dA5579e202FdBF0D90';\n\nconst MainMint = ({ accounts, setAccounts})=> {\n  const [mintAmount, setMintAmount] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n\n  async function handleMint(){\n    if (window.ethereum){\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.contract(\n        POSPAddress,\n        POSP.abi,\n        signer\n      );\n      try {\n        const response = await contract.mint(BigNumber.from(mintAmount));\n        console.log('response: ', response);\n      }catch(err){\n        console.log(\"error: \", err)\n      }\n    }\n  }\n\n  const handleDecrement = () =>{\n    if(mintAmount<=1) return;\n    setMintAmount (mintAmount -1);\n  };\n\n  const handleIncrement = () =>{\n//   if(mintAmount >= 3) return;\n    setMintAmount(mintAmount + 1)\n  };\n\n  return(\n    <div>\n       <h1>POSP</h1>\n       <p>Welcome to the future where your resume is a collection of NFTs</p>\n       {isConnected?(\n         <div>\n           <div>\n             <button onClick={handleDecrement}>-</button>\n             <input type=\"number\" value = {mintAmount}/>\n             <button onClick={handleIncrement}>-</button>\n           </div>\n           <button onClick = {handleMint}>Mint Now</button>\n          </div>\n       ):(\n         <p>You are not connected to Mint. </p>\n       )}\n    </div>\n  );\n};\n\nexport default MainMint;\n"]},"metadata":{},"sourceType":"module"}