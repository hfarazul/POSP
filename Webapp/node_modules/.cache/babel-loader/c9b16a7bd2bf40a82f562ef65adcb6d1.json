{"ast":null,"code":"var _jsxFileName = \"/Users/haquefarazul/POSP/Webapp/src/MainMint.js\";\nimport { useState } from 'react'; //import { ethers } from \"ethers\";\n\nimport POSP from './POSP.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst POSPAddress = '0x176d3abcb6c27802AacCA2B29102081ea3767125';\n\nasync function usehandleMint() {\n  console.log(\"handlemint called\");\n\n  if (window.ethereum) {\n    console.log(\"etherium detected\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.contract(POSPAddress, POSP.abi, signer);\n    console.log(\"contract = \", contract);\n\n    try {\n      const response = await contract.mint(1, 2); //       const response = await contract.mint(BigNumber.from(mintAmount), {\n      //          value: ethers.utils.parseEther((0.0001*mintAmount).toString())\n      //        });\n\n      console.log('response: ', response);\n    } catch (err) {\n      console.log(\"error: \", err);\n    }\n  } else {\n    console.log(\"etherium not detected\");\n  }\n}\n\nconst MainMint = _ref => {\n  let {\n    accounts,\n    setAccounts\n  } = _ref;\n  // const [mintAmount, setMintAmount] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n\n  async function handleMint() {\n    console.log(\"handlemint called\");\n\n    if (window.ethereum) {\n      console.log(\"etherium detected\");\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contract = new ethers.contract(POSPAddress, POSP.abi, signer);\n      console.log(\"contract = \", contract);\n\n      try {\n        const response = await contract.mint(1, 2); //       const response = await contract.mint(BigNumber.from(mintAmount), {\n        //          value: ethers.utils.parseEther((0.0001*mintAmount).toString())\n        //        });\n\n        console.log('response: ', response);\n      } catch (err) {\n        console.log(\"error: \", err);\n      }\n    } else {\n      console.log(\"etherium not detected\");\n    }\n  } //   const handleDecrement = () =>{\n  //     if(mintAmount<=1) return;\n  //     setMintAmount (mintAmount -1);\n  //   };\n  //   const handleIncrement = () =>{\n  // //   if(mintAmount >= 3) return;\n  //     setMintAmount(mintAmount + 1)\n  //   };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Welcome to the future where your resume is a collection of NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 8\n    }, this), isConnected ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You are not connected to Mint. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MainMint;\nexport default MainMint;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainMint\");","map":{"version":3,"sources":["/Users/haquefarazul/POSP/Webapp/src/MainMint.js"],"names":["useState","POSP","ethers","require","POSPAddress","usehandleMint","console","log","window","ethereum","provider","providers","Web3Provider","send","signer","getSigner","contract","abi","response","mint","err","MainMint","accounts","setAccounts","isConnected","Boolean","handleMint"],"mappings":"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","sourcesContent":["import {useState} from 'react';\n//import { ethers } from \"ethers\";\nimport POSP from './POSP.json';\nconst { ethers } = require(\"ethers\");\nconst POSPAddress = '0x176d3abcb6c27802AacCA2B29102081ea3767125';\n\nasync function usehandleMint(){\n  console.log(\"handlemint called\")\n  if (window.ethereum){\n    console.log(\"etherium detected\")\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contract = new ethers.contract(\n      POSPAddress,\n      POSP.abi,\n      signer\n    );\n    console.log(\"contract = \", contract)\n    try {\n      const response = await contract.mint(1,2);\n      //       const response = await contract.mint(BigNumber.from(mintAmount), {\n//          value: ethers.utils.parseEther((0.0001*mintAmount).toString())\n//        });\n      console.log('response: ', response);\n    }catch(err){\n      console.log(\"error: \", err)\n    }\n  }\n  else {\n    console.log(\"etherium not detected\")\n  }\n}\n\nconst MainMint = ({ accounts, setAccounts})=> {\n  // const [mintAmount, setMintAmount] = useState(1);\n  const isConnected = Boolean(accounts[0]);\n\n  async function handleMint(){\n    console.log(\"handlemint called\")\n    if (window.ethereum){\n      console.log(\"etherium detected\")\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const contract = new ethers.contract(\n        POSPAddress,\n        POSP.abi,\n        signer\n      );\n      console.log(\"contract = \", contract)\n      try {\n        const response = await contract.mint(1,2);\n        //       const response = await contract.mint(BigNumber.from(mintAmount), {\n//          value: ethers.utils.parseEther((0.0001*mintAmount).toString())\n//        });\n        console.log('response: ', response);\n      }catch(err){\n        console.log(\"error: \", err)\n      }\n    }\n    else {\n      console.log(\"etherium not detected\")\n    }\n  }\n\n//   const handleDecrement = () =>{\n//     if(mintAmount<=1) return;\n//     setMintAmount (mintAmount -1);\n//   };\n\n//   const handleIncrement = () =>{\n// //   if(mintAmount >= 3) return;\n//     setMintAmount(mintAmount + 1)\n//   };\n\n  return(\n    <div>\n       <p>Welcome to the future where your resume is a collection of NFTs</p>\n       {isConnected?(\n         <div>\n           {/* <div>\n             <button onClick={handleDecrement}>-</button>\n             <input type=\"number\" value = {mintAmount}/>\n             <button onClick={handleIncrement}>-</button>\n           </div> */}\n           {/* <button onClick = {handleMint}>Mint Now</button> */}\n          </div>\n       ):(\n         <p>You are not connected to Mint. </p>\n       )}\n    </div>\n  );\n};\n\nexport default MainMint;\n"]},"metadata":{},"sourceType":"module"}